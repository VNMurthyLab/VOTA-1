'''
Created on Aug 9, 2017

@author: Lab Rat
'''
from math import sqrt
from ScopeFoundry import Measurement
from ScopeFoundry.helper_funcs import sibling_path, load_qt_ui_file
from ScopeFoundry import h5_io
import pyqtgraph as pg
import numpy as np
import time
from random import randint,random
from PyQt5.QtWidgets import QDoubleSpinBox
import cv2
import os

class VOTACalibrationMeasure(Measurement):
    
    # this is the name of the measurement that ScopeFoundry uses 
    # when displaying your measurement and saving data related to it    
    name = "vota_calibration"
    
    def setup(self):
        """
        Runs once during App initialization.
        This is the place to load a user interface file,
        define settings, and set up data structures. 
        """
        
        # Define ui file to be used as a graphical interface
        # This file can be edited graphically with Qt Creator
        # sibling_path function allows python to find a file in the same folder
        # as this python module
        self.ui_filename = sibling_path(__file__, "calibration_plot.ui")
        
        #Load ui file and convert it to a live QWidget of the user interface
        self.ui = load_qt_ui_file(self.ui_filename)

        # Measurement Specific Settings
        # This setting allows the option to save data to an h5 data file during a run
        # All settings are automatically added to the Microscope user interface
        self.settings.New('save_movie', dtype=bool, initial=False,ro=False)
        self.settings.New('save_h5', dtype=bool, initial=False,ro=False)
        self.settings.New('train', dtype=bool, initial=False,ro=False)
        self.settings.New('tdelay', dtype=int, initial=0,ro=True)
        self.settings.New('flowrate',dtype=float,initial=0,ro=True)
        
        self.settings.New('movie_on', dtype=bool, initial=False,ro=True)
        self.settings.New('vmin',dtype=int,initial=0)
        self.settings.New('vmax',dtype=int,initial=255)
        '''
        Initialize experiment settings
        '''
        self.exp_settings=[]
        self.exp_settings.append(self.settings.New('odor',dtype=int, 
                                                   initial=1,vmin=1,vmax=3,ro=False))
        self.exp_settings.append(self.settings.New('odor_level',dtype=int, 
                                                   initial=50,vmin=0,vmax=100,ro=False))
        self.exp_settings.append(self.settings.New('odor_dc',dtype=int, 
                                                   initial=50,vmin=0,vmax=100,ro=False))
        self.exp_settings.append(self.settings.New('odor_time',dtype=int, 
                                                   initial=1000,vmin=0,vmax=1000,ro=False))

        
        
        
        #self.settings.New('sampling_period', dtype=float, unit='s', initial=0.005)
        
        # Create empty numpy array to serve as a buffer for the acquired data
        #self.buffer = np.zeros(10000, dtype=float)
        
        # Define how often to update display during a run
        self.display_update_period = 0.04
        
        # Convenient reference to the hardware used in the measurement
        self.daq_ai = self.app.hardware['daq_ai']
        self.arduino_sol =self.app.hardware['arduino_sol']
        self.odor_gen =self.app.hardware['odor_gen']
        
        self.app.settings.sample.update_value('Twitch')


        
    def setup_figure(self):
        """
        Runs once during App initialization, after setup()
        This is the place to make all graphical interface initializations,
        build plots, etc.
        """
        
        # connect ui widgets to measurement/hardware settings or functions
        self.ui.start_pushButton.clicked.connect(self.start)
        self.ui.interrupt_pushButton.clicked.connect(self.interrupt)
        self.settings.save_h5.connect_to_widget(self.ui.save_h5_checkBox)
        self.settings.flowrate.connect_to_widget(self.ui.flowrate_doubleSpinBox)
        self.odor_gen.settings.clean_factor.connect_to_widget(self.ui.clean_factor_doubleSpinBox)
        self.odor_gen.settings.clean_delay.connect_to_widget(self.ui.clean_delay_doubleSpinBox)
        
        #self.settings.task_duration.connect_to_widget(self.ui.task_duration_doubleSpinBox)
        for exp_setting in self.exp_settings:
            exp_widget_name=exp_setting.name+'_doubleSpinBox'
            #print(exp_widget_name)
            exp_widget=self.ui.findChild(QDoubleSpinBox,exp_widget_name)
            exp_setting.connect_to_widget(exp_widget)
        
        self.graph_layout=pg.GraphicsLayoutWidget()
        self.ui.plot_groupBox.layout().addWidget(self.graph_layout)
        
        
        
        '''
        Add Plots
        '''
        # Create PlotItem object (a set of axes)  
        self.plot1 = self.graph_layout.addPlot(row=1,col=1,title="PID",pen='r')
        self.plot2 = self.graph_layout.addPlot(row=2,col=1,title="Flowrate (L/min)")
        #self.plot3 = self.graph_layout.addPlot(row=3,col=1,title="Lick")
        #self.plot4 = self.graph_layout.addPlot(row=4,col=1,title="Position and Speed")
        self.plot5 = self.graph_layout.addPlot(row=5,col=1,title="Odor Output Target")
        
       
        
        # Create PlotDataItem object ( a scatter plot on the axes )
        self.plot_line1 = self.plot1.plot([0])    
        self.plot_line2 = self.plot2.plot([0])
        #self.plot_line3 = self.plot3.plot([0])
             
        self.clean_plot_line = self.plot5.plot([0])  
        self.odor_plot_line1 = self.plot5.plot([1])  
        self.odor_plot_line2 = self.plot5.plot([2])  
        self.odor_plot_line3 = self.plot5.plot([3])
        #self.position_line=self.plot4.plot([0])
        #self.speed_line=self.plot4.plot([1])
        
        self.plot_line1.setPen('r')
        self.plot_line2.setPen('w')
#        self.plot_line3.setPen('b')
        
        self.clean_plot_line.setPen('b')
        self.odor_plot_line1.setPen('r')
        self.odor_plot_line2.setPen('g')
        self.odor_plot_line3.setPen('y')
        
        
        #self.position_line.setPen('w')
        #self.speed_line.setPen('r')
        
        
        '''
        initial time marks
        '''
        self.T=np.linspace(0,10,10000)
        self.k=0
    
                   
    def update_display(self):
        """
        Displays (plots) the numpy array self.buffer. 
        This function runs repeatedly and automatically during the measurement run.
        its update frequency is defined by self.display_update_period
        """
        self.plot_line1.setData(self.k+self.T,self.buffer[:,1]) 
        self.plot_line2.setData(self.k+self.T,self.buffer[:,0]) 
        #self.plot_line3.setData(self.k+self.T,self.buffer[:,2])
        
        self.clean_plot_line.setData(self.k+self.T,self.buffer[:,7])
        self.odor_plot_line1.setData(self.k+self.T,self.buffer[:,8]) 
        self.odor_plot_line2.setData(self.k+self.T,self.buffer[:,9]) 
        self.odor_plot_line3.setData(self.k+self.T,self.buffer[:,10])
        
       
        #self.position_line.setData(self.k+self.T,self.buffer[:,3])
        #self.speed_line.setData(self.k+self.T,self.buffer[:,4])
        #print(self.buffer_h5.size)
       
        
   
        
   
    def run(self):
        """
        Runs when measurement is started. Runs in a separate thread from GUI.
        It should not update the graphical interface directly, and should only
        focus on data acquisition.
        """
        '''
        disable controls
        '''
        self.settings.save_h5.change_readonly(True)
        
        self.ui.save_h5_checkBox.setEnabled(False)
       
        '''
        initialize buffer
        '''
        num_of_chan=self.daq_ai.settings.num_of_chan.value()
        self.buffer = np.zeros((10000,num_of_chan+2+2+len(self.arduino_sol.sols)), dtype=float)
        self.buffer[0:self.settings.tdelay.value(),3]=100;
        
        self.stat_buffer=np.zeros((10000,5),dtype=float)
        '''
        initialize position
        '''
        position = 0
        '''
        initialize number of water drops given
        '''

        '''
        load odor waveform
        '''
        self.odor_gen.make_ladder_speed(self.settings.vmin.value(),self.settings.vmax.value())
        '''
        Decide whether to create HDF5 file or not
        '''
        # first, create a data file
        if self.settings['save_h5']:
            # if enabled will create an HDF5 file with the plotted data
            # first we create an H5 file (by default autosaved to app.settings['save_dir']
            # This stores all the hardware and app meta-data in the H5 file
            file_name_index=0
            file_name=os.path.join(self.app.settings.save_dir.value(),self.app.settings.sample.value())+'_'+str(file_name_index)+'.h5'
            while os.path.exists(file_name):
                file_name_index+=1
                file_name=os.path.join(self.app.settings.save_dir.value(),self.app.settings.sample.value())+'_'+str(file_name_index)+'.h5'
                
            self.h5file = h5_io.h5_base_file(app=self.app, fname=file_name,measurement=self)
            
            # create a measurement H5 group (folder) within self.h5file
            # This stores all the measurement meta-data in this group
            self.h5_group = h5_io.h5_create_measurement_group(measurement=self, h5group=self.h5file)
            
            # create an h5 dataset to store the data
            self.buffer_h5 = self.h5_group.create_dataset(name  = 'data', 
                                                          shape = self.buffer.shape,
                                                          dtype = self.buffer.dtype,
                                                          maxshape=(None,self.buffer.shape[1]))
            self.stat_buffer_h5 = self.h5_group.create_dataset(name  = 'stats', 
                                                          shape = self.stat_buffer.shape,
                                                          dtype = self.stat_buffer.dtype)
            
        
        if self.settings.save_movie.value():
            movie_name=os.path.join(self.app.settings.save_dir.value(),self.app.settings.sample.value())+'_'+str(file_name_index)+'.avi'
            self.camera.settings.file_name.update_value(movie_name)
            self.camera.open_file()
        
        # We use a try/finally block, so that if anything goes wrong during a measurement,
        # the finally block can clean things up, e.g. close the data file object.
        '''
        start actual protocol
        '''
        try:
            '''
            initialize counter ticks
            '''
            i = 0 #counter tick for loading buffer
            j = 0 #counter tick for saving hdf5 file
            self.k=0 #number of seconds saved
            #water_tick=0 #
            step_size=self.daq_ai.settings.buffer_size.value()
            #self.odor_gen.make_ladder_speed(self.settings.vmin.value(),self.settings.vmax.value())
            '''
            Start DAQ, Default at 1kHz
            '''
            self.daq_ai.start()
            
            # Will run forever until interrupt is called.
            '''
            Expand HDF5 buffer when necessary
            '''
            while not self.interrupt_measurement_called:
                i %= self.buffer.shape[0]
                if self.settings['save_h5']:
                    if j>(self.buffer_h5.shape[0]-step_size):
                        self.buffer_h5.resize((self.buffer_h5.shape[0]+self.buffer.shape[0],self.buffer.shape[1]))
                        self.k +=10
                

                '''
                Update Progress Bar
                '''
                self.settings['progress'] = i * 100./self.buffer.shape[0]
                
                
                
#                 '''
#                 update water status
#                 '''
#                 if (water_tick<(self.settings.lick_interval.value()*1000)):
#                     water_tick+=1
#                 else:
#                     self.settings.water_reward.update_value(True)
#                     water_tick=0
                

                
                
                
                '''
                Read DAQ sensor data(0:PID, 1:flowrate, 2:lick)
                '''
                # Fills the buffer with sine wave readings from func_gen Hardware
                self.buffer[i:(i+step_size),0:num_of_chan] = self.daq_ai.read_data()
                self.buffer[i,0]=(self.buffer[i,0]-1.54)/8.45 #convert flow rate from 0-1 L/min
                self.buffer[i,2]=bool(int(2*(4-self.buffer[i,2]))) #convert lick sensor into 0(no lick) and 1(lick)
                self.settings.flowrate.update_value(self.buffer[i,0])
                #ask if the animal licked in this interval
                if i%1000==0:
                    self.odor_gen.pulse(self.settings.odor.value(),
                                                self.settings.odor_time.value(),
                                                self.settings.odor_dc.value(),
                                                self.settings.odor_level.value())
                '''
                Decide whether water will be given, based on the status of reward and lick
                '''
#                 if self.settings.water_reward.value():
#                     if lick:
#                         self.water.give_water()
#                         self.settings.water_reward.update_value(False)
#                         '''
#                         save water given (5:If water given 6:water opened time)
#                         '''
#                         self.buffer[i,num_of_chan+2]=1
#                         self.buffer[i,num_of_chan+3]=self.water.settings.open_time.value()
#                         total_drops+=1
#                         self.settings.total_drops.update_value(total_drops)

                '''
                Read odor value from the odor generator, otherwise fill with clean air(default)
                '''
                if self.odor_gen.buffer_empty():
                    odor_value=[255,0,0,0,0,0,0,0]
                    odor_disp_value=odor_value
                else:
                    odor_value_packet=self.odor_gen.read()
                    odor_value=odor_value_packet[0]
                    odor_disp_value=odor_value_packet[1]
                    
                '''
                write odor value to valve
                '''
#                 self.arduino_sol.load(odor_value)
#                 #if (i%2==0):
#                 self.arduino_sol.write()
                
                '''
                write odor value to display (7:clean air 8:odor1 9:odor2 10:odor3)
                '''
#                 self.buffer[i:(i+step_size),(num_of_chan+4):(num_of_chan+4+len(self.arduino_sol.sols))]=odor_disp_value
                
                '''
                Save hdf5 file
                '''
                if self.settings['save_h5']:
                    # if we are saving data to disk, copy data to H5 dataset
                    self.buffer_h5[j:(j+step_size),:] = self.buffer[i:(i+step_size),:]
                    # flush H5
                    self.h5file.flush()
            
                
                # wait between readings.
                # We will use our sampling_period settings to define time
                #time.sleep(self.settings['sampling_period'])
                
                i += step_size
                j += step_size
               
                
                if self.interrupt_measurement_called:
                    # Listen for interrupt_measurement_called flag.
                    # This is critical to do, if you don't the measurement will
                    # never stop.
                    # The interrupt button is a polite request to the 
                    # Measurement thread. We must periodically check for
                    # an interrupt request
                    break

        finally:
            
            
            self.settings.save_h5.change_readonly(False)

            
            self.ui.save_h5_checkBox.setEnabled(True)
           
            self.arduino_sol.write_default()
            self.daq_ai.stop()
            self.odor_gen.flush()            
            if self.settings['save_h5']:
                # make sure to close the data file
                self.h5file.close()
