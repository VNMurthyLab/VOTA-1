'''
Created on Aug 9, 2017

@author: Hao Wu
'''
import numpy as np
import serial
import time

class DAQaiDI(Task):
    
    def __init__(self,channels='Dev2/port1/line0',num_of_chan=1,rate=1000.0,buffer_size=1,queue_size=10000,clock_source="Dev2/ai/SampleClock"):
        Task.__init__(self)
        self.buffer_size=buffer_size
        self.num_of_chan=num_of_chan
        self.clock_source=clock_source
        self.data = zeros(self.buffer_size*self.num_of_chan)
        self.buffer = Queue()
        self.CreateDIChan(channels,"",DAQmx_Val_ChanPerLine)
        self.CfgSampClkTiming(clock,rate,DAQmx_Val_Rising,DAQmx_Val_ContSamps,self.
                              buffer_size)
        self.AutoRegisterEveryNSamplesEvent(DAQmx_Val_Acquired_Into_Buffer,self.buffer_size,0)
        self.AutoRegisterDoneEvent(0)
        
    def EveryNCallback(self):
        read = int32()
        self.ReadDigitalU32(self.buffer_size,10.0,DAQmx_Val_GroupByScanNumber,self.data,self.buffer_size*self.num_of_chan,byref(read),None)
        self.buffer.put(reshape(self.data,(self.buffer_size,self.num_of_chan)))
        #print(self.data)
        return 0 # The function should return an integer
    
    def DoneCallback(self, status):
        print("Status",status.value)
        return 0 # The function should return an integer
    
    def read_data(self):
        return self.buffer.get(True,10.0)
        
    def read_current_data(self):
        return self.data
    
    def get_size(self):
        return self.buffer.qsize()

class ArduinoSolDev(object):
    '''
    classdocs
    '''

    def __init__(self, port='COM3',baud_rate=250000):
        '''
        Constructor
        '''
        self.port=port
        self.baud_rate=baud_rate
        
        self.ser=serial.Serial(self.port,self.baud_rate,timeout=1)
        
    def write(self,sol_level=[0,0,0,0]):
        output=bytes('s','utf-8');
        for i in range(len(sol_level)):
            output=b''.join([output,sol_level[i].to_bytes(2,'big')])
        self.ser.write(output)
        
    def read(self):
        return self.ser.readline()
    
    def open(self):
        self.ser.open()
        
    def close(self):
        self.ser.close()
    
    def __del__(self):
        self.close()
        del self.ser
        

if __name__ == '__main__':
    sol=ArduinoSolDev()
    time.sleep(2)
    a=time.time()
    for i in range(3):
        sol.write()
    b=time.time()
    print(sol.read(),i)
    
    print(b-a)