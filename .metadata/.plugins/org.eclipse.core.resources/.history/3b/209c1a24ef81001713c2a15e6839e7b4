'''
Created on Aug 9, 2017

@author: Hao Wu
'''

from ScopeFoundry import HardwareComponent
from VOTAScopeHW.arduino_wheel.arduino_wheel_dev import ArduinoWheelDev
import time
from math import exp
class ArduinoWheelHW(HardwareComponent):
    '''
    Hardware Component Class for receiving AI input for breathing, licking etc
    '''
    
    name='arduino_sol'

    def setup(self,port='COM3',baud_rate=250000):
        '''
        add settings for analog input event
        '''
        self.settings.New(name='port',initial=port,dtype=str,ro=False)
        self.settings.New(name='baud_rate',initial=baud_rate,dtype=int,ro=False)
        self.settings.New(name='position',initial=baud_rate,dtype=int,ro=True)
        self.settings.New(name='speed',initial=baud_rate,dtype=int,ro=True)
        


    def connect(self):
        self._dev=ArduinoSolDev(self.settings.port.value(),
                          self.settings.baud_rate.value())
    
    def write(self):
        sol_vals=[]
        for i in range(len(self.sols)):
            a=self.a[i].value()
            b=self.b[i].value()
            c=self.c[i].value()
            d=self.d[i].value()
            k=self.k[i].value()
            p=self.p[i].value()
            va=self.va[i].value()
            vb=self.vb[i].value()
            coeff=self.speed_coeffs[i].value()
            
            x=int(self.sols[i].value()*coeff)
            if x==0:
                sol_vals.append(0)
            elif x==1:
                sol_vals.append(int(va))
            elif x==2:
                sol_vals.append(int(vb))
            else:
                if x<20:
                    sol_vals.append(int(a*exp(b*x)+c*exp(d*x)))
                else:
                    sol_vals.append(int(p+k*x))
        
        self._dev.write(sol_vals)
        
    def write_raw(self):
        sol_vals=[]
        for i in range(len(self.sols)):
            x=self.sols[i].value()
            sol_vals.append(int(x))
        
        self._dev.write(sol_vals)
        
    def set_low(self):
        for sol in self.sols:
            sol.update_value(0)
    
    def write_low(self):
        self.set_low()
        self.write()
            
    def write_default(self):
        self.set_low()
        self.sols[0].update_value(100)
        self.write()
            
    def load(self,vals):
        for i in range(len(vals)):
            self.sols[i].update_value(vals[i])
        
    def start(self):
        self._dev.open()
        
    def stop(self):
        self._dev.close()
        
    def disconnect(self):
        try:
            self.stop()
            del self._dev
            del self.write
            
        except AttributeError:
            pass
        
    def load_sol_params(self):
        self.a[1].update_value(1170)
        self.b[1].update_value(0.001481)
        self.c[1].update_value(-119.6)
        self.d[1].update_value(-0.1885)
        self.k[1].update_value(1.369)
        self.p[1].update_value(1183)
        self.va[1].update_value(1068)
        self.vb[1].update_value(1090)

        self.a[2].update_value(1295)
        self.b[2].update_value(0.00337)
        self.c[2].update_value(-178)
        self.d[2].update_value(-0.157)
        self.k[2].update_value(3.761)
        self.p[2].update_value(1318)
        self.va[2].update_value(1158)
        self.vb[2].update_value(1176)
      
        self.a[3].update_value(1075)
        self.b[3].update_value(0.002775)
        self.c[3].update_value(-66.95)
        self.d[3].update_value(-0.2807)
        self.k[3].update_value(3.276)
        self.p[3].update_value(1061)
        self.va[3].update_value(1021)
        self.vb[3].update_value(1041)

if __name__ == '__main__':
    ai=DAQaiHW()
    ai.connect()
    print(ai._data)
    time.sleep(1)
    ai.disconnect()